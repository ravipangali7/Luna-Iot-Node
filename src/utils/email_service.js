const nodemailer = require('nodemailer');

class EmailService {
    constructor() {
        this.transporter = null;
        this.initializeTransporter();
    }

    initializeTransporter() {
        try {
            this.transporter = nodemailer.createTransporter({
                host: 'smtp.gmail.com',
                port: 587,
                secure: false, // true for 465, false for other ports
                auth: {
                    user: "legendromeoravi@gmail.com",
                    pass: "anpyvnntbfemcguk"
                }
            });

            // Verify connection configuration
            this.transporter.verify((error, success) => {
                if (error) {
                    console.error('SMTP configuration error:', error);
                } else {
                    console.log('SMTP server is ready to take our messages');
                }
            });
        } catch (error) {
            console.error('Email service initialization error:', error);
        }
    }

    async sendEmail(to, subject, text, html, attachments = []) {
        try {
            if (!this.transporter) {
                throw new Error('Email transporter not initialized');
            }

            const mailOptions = {
                from: "legendromeoravi@gmail.com",
                to: to,
                subject: subject,
                text: text,
                html: html,
                attachments: attachments
            };

            const result = await this.transporter.sendMail(mailOptions);
            console.log('Email sent successfully:', result.messageId);
            return { success: true, messageId: result.messageId };
        } catch (error) {
            console.error('Error sending email:', error);
            return { success: false, error: error.message };
        }
    }

    async sendDatabaseBackupEmail(recipientEmail, backupFilePath, databaseName) {
        try {
            const subject = `Database Backup - ${databaseName} - ${new Date().toISOString().split('T')[0]}`;
            const text = `Please find attached the database backup for ${databaseName} generated on ${new Date().toISOString()}`;
            const html = `
                <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
                    <h2 style="color: #333;">Database Backup Report</h2>
                    <p><strong>Database:</strong> ${databaseName}</p>
                    <p><strong>Generated:</strong> ${new Date().toISOString()}</p>
                    <p><strong>Backup File:</strong> ${backupFilePath.split('/').pop()}</p>
                    <hr style="margin: 20px 0;">
                    <p>This is an automated backup generated by Luna IoT System.</p>
                    <p>Please keep this backup file secure and store it in a safe location.</p>
                </div>
            `;

            const attachments = [{
                filename: `${databaseName}_backup_${new Date().toISOString().split('T')[0]}.sql`,
                path: backupFilePath
            }];

            return await this.sendEmail(recipientEmail, subject, text, html, attachments);
        } catch (error) {
            console.error('Error sending database backup email:', error);
            return { success: false, error: error.message };
        }
    }
}

module.exports = new EmailService();